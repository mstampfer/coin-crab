name: Deploy Server to AWS EC2

# 🛡️ BRANCH PROTECTION GUARDRAIL #1: Trigger Restriction
# This workflow triggers on pushes to 'main' and 'uat' branches
# main branch deploys to prod folder, uat branch deploys to uat folder
on:
  push:
    branches: [ main, uat ]  # ⚠️ DEPLOYMENT SAFETY: Only main and uat branches trigger deployment
    paths:
      - 'crates/server/**'
      - 'crates/shared/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [ main, uat ]
    paths:
      - 'crates/server/**'
      - 'crates/shared/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:  # Enable manual trigger from GitHub UI

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check workspace
      run: cargo check --workspace
      
    - name: Run server tests
      run: cargo test -p coin-crab-server --verbose
      
    - name: Run shared crate tests  
      run: cargo test -p shared --verbose
      
    - name: Build server for release
      run: |
        # Install cross-compilation tools for ARM64
        sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
        
        # Set environment variables for cross-compilation
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
        export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
        export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        
        # Use rustls instead of OpenSSL to avoid cross-compilation issues
        export CARGO_NET_GIT_FETCH_WITH_CLI=true
        
        # Add Rust target for ARM64
        rustup target add aarch64-unknown-linux-gnu
        
        # Build for ARM64 (using rustls instead of OpenSSL)
        cargo build -p coin-crab-server --release --target aarch64-unknown-linux-gnu
        
        # Debug: show binary info
        file target/aarch64-unknown-linux-gnu/release/coin-crab-server
        ls -la target/aarch64-unknown-linux-gnu/release/coin-crab-server
      
    - name: Upload server binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coin-crab-server-binary
        path: target/aarch64-unknown-linux-gnu/release/coin-crab-server
        retention-days: 7

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: test
    # 🛡️ BRANCH PROTECTION GUARDRAIL #2: Runtime Branch Verification
    # Double-safety check: Even if workflow somehow triggers, deployment only runs from main or uat branches
    # This prevents accidental deployment from dev or other branches if they somehow trigger the workflow
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/uat') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')  # ⚠️ DEPLOYMENT SAFETY: Runtime branch verification
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download server binary
      uses: actions/download-artifact@v4
      with:
        name: coin-crab-server-binary
        path: ./artifacts
        
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/aws-freetier.pem
        chmod 600 ~/.ssh/aws-freetier.pem
        ssh-keyscan -H 100.26.107.175 >> ~/.ssh/known_hosts
        
    - name: Set deployment environment
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          echo "MQTT_PORT=1883" >> $GITHUB_ENV
          echo "HTTP_PORT=8080" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" = "refs/heads/uat" ]; then
          echo "DEPLOY_ENV=uat" >> $GITHUB_ENV
          echo "MQTT_PORT=1882" >> $GITHUB_ENV
          echo "HTTP_PORT=8079" >> $GITHUB_ENV
        fi
        echo "Deploying to environment: $DEPLOY_ENV"
        
    - name: Copy server files to EC2
      run: |
        # Create directory on EC2
        ssh -i ~/.ssh/aws-freetier.pem ec2-user@100.26.107.175 "mkdir -p coin_crab_server/$DEPLOY_ENV"
        
        # Copy binary
        scp -i ~/.ssh/aws-freetier.pem ./artifacts/coin-crab-server ec2-user@100.26.107.175:~/coin_crab_server/$DEPLOY_ENV/
        
        # Copy configuration files
        scp -i ~/.ssh/aws-freetier.pem crates/server/.env.server ec2-user@100.26.107.175:~/coin_crab_server/$DEPLOY_ENV/ || echo "No .env.server file found - you'll need to create it manually on the server"
        scp -i ~/.ssh/aws-freetier.pem crates/server/rumqttd.toml ec2-user@100.26.107.175:~/coin_crab_server/$DEPLOY_ENV/
        
    - name: Deploy and restart server
      run: |
        ssh -i ~/.ssh/aws-freetier.pem ec2-user@100.26.107.175 << EOF
          cd coin_crab_server/$DEPLOY_ENV
          
          # Debug: Check system architecture and binary format
          echo "🔍 EC2 System Info ($DEPLOY_ENV environment):"
          uname -m
          file coin-crab-server
          
          # Make binary executable
          chmod +x coin-crab-server
          
          # Stop existing server for this environment if running
          if [ -f server.pid ] && ps -p \$(cat server.pid) > /dev/null 2>&1; then
            echo "Stopping existing $DEPLOY_ENV server with PID \$(cat server.pid)"
            kill \$(cat server.pid) || echo "Failed to stop server gracefully"
            sleep 3
          fi
          
          # Start server in background with nohup
          # Redirect output to log file
          nohup ./coin-crab-server > server.log 2>&1 &
          
          # Save PID for future management
          echo \$! > server.pid
          
          # Wait a moment and check if server started
          sleep 3
          if ps -p \$(cat server.pid) > /dev/null 2>&1; then
            echo "✅ $DEPLOY_ENV server started successfully with PID \$(cat server.pid)"
            echo "📊 Server status:"
            ps -p \$(cat server.pid) -o pid,ppid,cmd
          else
            echo "❌ $DEPLOY_ENV server failed to start"
            echo "📋 Last 20 lines of server log:"
            tail -20 server.log
            exit 1
          fi
        EOF
        
    - name: Verify deployment
      run: |
        ssh -i ~/.ssh/aws-freetier.pem ec2-user@100.26.107.175 << EOF
          cd coin_crab_server/$DEPLOY_ENV
          echo "🔍 Checking $DEPLOY_ENV server status..."
          if [ -f server.pid ] && ps -p \$(cat server.pid) > /dev/null 2>&1; then
            echo "✅ $DEPLOY_ENV server is running with PID \$(cat server.pid)"
            
            # Check if MQTT port is listening
            if netstat -tuln | grep -q ":$MQTT_PORT "; then
              echo "✅ MQTT broker is listening on port $MQTT_PORT"
            else
              echo "⚠️  MQTT broker may not be listening on port $MQTT_PORT"
            fi
            
            # Check if HTTP port is listening
            if netstat -tuln | grep -q ":$HTTP_PORT "; then
              echo "✅ HTTP API is listening on port $HTTP_PORT"
            else
              echo "⚠️  HTTP API may not be listening on port $HTTP_PORT"
            fi
            
            # Show recent log entries
            echo "📋 Recent $DEPLOY_ENV server logs:"
            tail -10 server.log
          else
            echo "❌ $DEPLOY_ENV server is not running"
            echo "📋 Server log:"
            cat server.log
            exit 1
          fi
        EOF

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "🚀 Server deployed to AWS EC2: 100.26.107.175"
        echo "📁 Environment: ${{ github.ref == 'refs/heads/main' && 'production (prod folder)' || 'UAT (uat folder)' }}"
        echo "📡 MQTT broker available at: 100.26.107.175:${{ github.ref == 'refs/heads/main' && '1883' || '1882' }}"
        echo "🌐 HTTP API available at: 100.26.107.175:${{ github.ref == 'refs/heads/main' && '8080' || '8079' }}"
        
    - name: Deployment Failed
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "🔍 Check the deploy job logs for details"
        exit 1